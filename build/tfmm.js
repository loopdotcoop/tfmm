// Generated by CoffeeScript 1.9.2

/*! Tfmm 0.0.7 //// MIT Licence //// http://tfmm.loop.coop/ */

(function() {
  var Flourish, Maestro, Main, Timeline, Voice, VoiceSet, ª, ªA, ªB, ªE, ªF, ªI, ªN, ªO, ªR, ªS, ªU, ªV, ªX, ªclone, ªex, ªhas, ªpopulate, ªredefine, ªretrieve, ªtype, ªuid,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  ªI = 'Tfmm';

  ªV = '0.0.7';

  ªA = 'array';

  ªB = 'boolean';

  ªE = 'error';

  ªF = 'function';

  ªN = 'number';

  ªO = 'object';

  ªR = 'regexp';

  ªS = 'string';

  ªU = 'undefined';

  ªX = 'null';

  ª = console.log.bind(console);

  ªex = function(x, a, b) {
    var pos;
    if (-1 === (pos = a.indexOf(x))) {
      return x;
    } else {
      return b.charAt(pos);
    }
  };

  ªhas = function(h, n, t, f) {
    if (t == null) {
      t = true;
    }
    if (f == null) {
      f = false;
    }
    if (-1 !== h.indexOf(n)) {
      return t;
    } else {
      return f;
    }
  };

  ªtype = function(x) {
    return {}.toString.call(x).match(/\s([a-z|A-Z]+)/)[1].toLowerCase();
  };

  ªuid = function(p) {
    return p + '_' + (Math.random() + '1111111111111111').slice(2, 18);
  };

  ªredefine = function(obj, name, value, kind) {
    switch (kind) {
      case 'constant':
        return Object.defineProperty(obj, name, {
          value: value,
          enumerable: true
        });
      case 'private':
        return Object.defineProperty(obj, name, {
          value: value,
          enumerable: false
        });
    }
  };

  ªretrieve = function(instances, identifier) {
    var instance;
    instance = instances[identifier];
    if (!instance) {
      switch (typeof identifier) {
        case ªS:
          throw new Error("'" + identifier + "' does not exist");
          break;
        case ªN:
          throw new Error("`" + identifier + "` does not exist");
          break;
        case ªU:
          throw new Error("`identifier` is `undefined`");
          break;
        default:
          throw new Error("`identifier` is type '" + (ªtype(identifier)) + "'");
      }
    }
    return instance;
  };

  ªpopulate = function(candidate, subject, rules, updating) {
    var errors, j, key, l, len, len1, rule, test, type, use, value;
    if (ªO !== ªtype(candidate)) {
      throw new Error("`candidate` is type '" + (ªtype(candidate)) + "' not 'object'");
    }
    errors = [];
    for (j = 0, len = rules.length; j < len; j++) {
      rule = rules[j];
      key = rule[0], use = rule[1], type = rule[2], test = rule[3];
      value = candidate[key];
      if (void 0 === value) {
        if (updating || void 0 !== use) {
          continue;
        } else {
          errors.push("Missing field '" + key + "' is mandatory");
        }
      } else if (type !== ªtype(value)) {
        errors.push("Field '" + key + "' is type '" + (ªtype(value)) + "' not '" + type + "'");
      } else if (!test.test(value)) {
        errors.push("Field '" + key + "' is '" + value + "' which fails " + ('' + test));
      }
    }
    if (errors.length) {
      throw new Error(errors.join('\n'));
    }
    for (l = 0, len1 = rules.length; l < len1; l++) {
      rule = rules[l];
      key = rule[0], use = rule[1], type = rule[2], test = rule[3];
      value = candidate[key];
      if (void 0 === value) {
        if (void 0 === subject[key]) {
          if (ªA === ªtype(use)) {
            subject[key] = use[0].apply(this, use.slice(1));
          } else {
            subject[key] = use;
          }
        }
      } else {
        subject[key] = value;
      }
    }
  };

  ªclone = function(subject, rules) {
    var j, key, len, out, rule;
    out = {};
    for (j = 0, len = rules.length; j < len; j++) {
      rule = rules[j];
      key = ªS === typeof rule ? rule : rule[0];
      out[key] = subject[key];
    }
    return out;
  };

  Flourish = (function() {
    Flourish.prototype.C = 'Flourish';

    Flourish.prototype.toString = function() {
      return "[object " + this.C + "]";
    };

    function Flourish(config) {
      if (config == null) {
        config = {};
      }
      this.start = config.start;
      this.duration = config.duration;
      this.velocity = config.velocity;
    }

    Flourish.prototype.render = function(now, context, size) {
      var pos, scale, thing;
      if (this.start + this.duration < now) {
        return;
      }
      if (this.start > now) {
        return;
      }
      thing = 1 - 1 / (this.duration / (now - this.start));
      scale = size * this.velocity * thing;
      pos = (size - scale) / 2;
      return context.fillRect(pos, pos, scale, scale);
    };

    return Flourish;

  })();

  Maestro = (function() {
    Maestro.prototype.C = 'Maestro';

    Maestro.prototype.toString = function() {
      return "[object " + this.C + "]";
    };

    function Maestro(config) {
      if (config == null) {
        config = {};
      }
      this.step = bind(this.step, this);
      this.renderers = config.renderers || [];
      if (config.raf) {
        this.raf = config.raf.bind(this);
      } else {
        this.raf = window.requestAnimationFrame.bind(window);
      }
      this.prevFlip2000 = -1;
    }

    Maestro.prototype.start = function() {
      return this.raf(this.step);
    };

    Maestro.prototype.step = function(stamp) {
      var cue, currFlip2000, flip2000, flip8000, fn, j, len, ref, renderer;
      currFlip2000 = stamp % 2000;
      if (currFlip2000 >= this.prevFlip2000) {
        flip2000 = false;
      } else {
        flip2000 = true;
        if (currFlip2000 === stamp % 8000) {
          flip8000 = true;
        } else {
          flip8000 = false;
        }
      }
      this.prevFlip2000 = currFlip2000;
      cue = {
        stamp: stamp,
        flip2000: flip2000,
        flip8000: flip8000,
        frac2000: (stamp % 2000) / 2000,
        frac8000: (stamp % 8000) / 8000
      };
      ref = this.renderers;
      fn = function(renderer) {
        return renderer.render(cue);
      };
      for (j = 0, len = ref.length; j < len; j++) {
        renderer = ref[j];
        fn(renderer);
      }
      return this.raf(this.step);
    };

    return Maestro;

  })();

  Main = (function() {
    Main.prototype.C = ªI;

    Main.prototype.toString = function() {
      return "[object " + this.C + "]";
    };

    function Main(config) {
      var $voiceSet, fn, j, len, ref;
      if (config == null) {
        config = {};
      }
      this.updater = bind(this.updater, this);
      this.active = null;
      this.arts = config.arts;
      this.$$voiceSets = config.$$voiceSets;
      this.voiceSets = this.initVoiceSets();
      this.maestro = new Maestro({
        renderers: this.voiceSets
      });
      this.maestro.start();
      window.addEventListener('keydown', (function(_this) {
        return function(event) {
          if (null === _this.active) {
            return;
          }
          if (81 === event.keyCode) {
            return _this.active.trigger(1);
          }
        };
      })(this));
      window.addEventListener('click', function() {
        return window.location.hash = '/';
      });
      ref = this.$$voiceSets;
      fn = function($voiceSet) {
        return $voiceSet.addEventListener('click', function(event) {
          if (-1 === this.className.indexOf('active')) {
            window.location.hash = this.id.substr(5).replace(/_/g, '/');
          } else {
            console.log(arts[this.id].voiceSet);
          }
          return event.stopPropagation();
        });
      };
      for (j = 0, len = ref.length; j < len; j++) {
        $voiceSet = ref[j];
        fn($voiceSet);
      }
    }

    Main.prototype.initVoiceSets = function() {
      var $voiceSet, j, len, ref, results;
      ref = this.$$voiceSets;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        $voiceSet = ref[j];
        results.push((function(_this) {
          return function($voiceSet) {
            var fn, front, k, l, len1, ref1, ref2, v;
            front = {};
            ref1 = _this.arts[$voiceSet.id].front;
            fn = function(k, v) {
              return front[k] = v;
            };
            for (l = 0, len1 = ref1.length; l < len1; l++) {
              ref2 = ref1[l], k = ref2[0], v = ref2[1];
              fn(k, v);
            }
            return _this.arts[$voiceSet.id].voiceSet = new VoiceSet({
              $voiceSet: $voiceSet,
              front: front
            });
          };
        })(this)($voiceSet));
      }
      return results;
    };

    Main.prototype.updater = function(current) {
      var j, len, ref, voiceSet;
      this.active = null;
      ref = this.voiceSets;
      for (j = 0, len = ref.length; j < len; j++) {
        voiceSet = ref[j];
        voiceSet.deactivate();
      }
      if (current.voiceSet) {
        this.active = current.voiceSet;
        return this.active.activate();
      }
    };

    return Main;

  })();

  Timeline = (function() {
    Timeline.prototype.C = 'Timeline';

    Timeline.prototype.toString = function() {
      return "[object " + this.C + "]";
    };

    function Timeline(config) {
      if (config == null) {
        config = {};
      }
      this.flourishes = [];
      this.now = 0;
    }

    Timeline.prototype.add = function(velocity) {
      return this.flourishes.push(new Flourish({
        start: this.now,
        duration: 0.2,
        velocity: velocity
      }));
    };

    Timeline.prototype.render = function(frame, context, size) {
      var flourish, j, len, ref, results;
      this.now = frame.frac2000;
      ref = this.flourishes;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        flourish = ref[j];
        results.push(flourish.render(this.now, context, size));
      }
      return results;
    };

    Timeline.prototype.quieten = function(multiplier, threshold) {
      var flourish, i, results;
      i = this.flourishes.length;
      results = [];
      while (i--) {
        flourish = this.flourishes[i];
        flourish.velocity *= multiplier;
        if (threshold >= flourish.velocity) {
          results.push(this.flourishes.splice(i, 1));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    return Timeline;

  })();

  VoiceSet = (function() {
    VoiceSet.prototype.C = 'VoiceSet';

    VoiceSet.prototype.toString = function() {
      return "[object " + this.C + "]";
    };

    function VoiceSet(config) {
      var i;
      if (config == null) {
        config = {};
      }
      this.ID = config.$voiceSet.id;
      this.focus = 0;
      this.size = 32;
      this.points = config.front.points.split(/\s+/);
      this.colors = config.front.colors.split(/\s+/);
      this.samples = config.front.samples.split(/\s+/);
      if (5 < this.colors.length) {
        throw new Error("'" + this.ID + "' frontmatter contains " + this.colors.length + " colors");
      }
      if (this.samples.length !== this.colors.length) {
        throw new Error("'" + this.ID + "' frontmatter contains unequal colors and samples");
      }
      this.$canvas = document.createElement('canvas');
      this.$canvas.setAttribute('width', this.size + 'px');
      this.$canvas.setAttribute('height', this.size + 'px');
      this.$canvas.setAttribute('class', 'visualizer');
      config.$voiceSet.appendChild(this.$canvas);
      this.visualizer = this.$canvas.getContext('2d');
      this.voices = [];
      i = this.colors.length;
      while (i--) {
        this.voices.push(new Voice({
          $voiceSet: config.$voiceSet,
          color: this.colors[i],
          sample: this.samples[i],
          visualizer: this.visualizer
        }));
      }
      this.voices[0].focus = true;
    }

    VoiceSet.prototype.activate = function() {
      var j, len, ref, results, voice;
      this.size = 256;
      this.$canvas.setAttribute('width', this.size + 'px');
      this.$canvas.setAttribute('height', this.size + 'px');
      ref = this.voices;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        voice = ref[j];
        results.push(voice.activate());
      }
      return results;
    };

    VoiceSet.prototype.deactivate = function() {
      var j, len, ref, results, voice;
      this.size = 32;
      this.$canvas.setAttribute('width', this.size + 'px');
      this.$canvas.setAttribute('height', this.size + 'px');
      ref = this.voices;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        voice = ref[j];
        results.push(voice.deactivate());
      }
      return results;
    };

    VoiceSet.prototype.render = function(frame) {
      var j, l, len, len1, len2, m, ref, ref1, ref2, voice;
      this.visualizer.clearRect(0, 0, this.size, this.size);
      if (frame.flip2000) {
        ref = this.voices;
        for (j = 0, len = ref.length; j < len; j++) {
          voice = ref[j];
          voice.hasFocus = false;
        }
        if (this.voices.length <= ++this.focus) {
          this.focus = 0;
        }
        this.voices[this.focus].hasFocus = true;
      }
      if (frame.flip8000) {
        ref1 = this.voices;
        for (l = 0, len1 = ref1.length; l < len1; l++) {
          voice = ref1[l];
          voice.timeline.quieten(0.5, 0.1);
        }
      }
      ref2 = this.voices;
      for (m = 0, len2 = ref2.length; m < len2; m++) {
        voice = ref2[m];
        voice.render(frame, this.size);
      }
      this.visualizer.fillStyle = "rgba(0,100,0,.5)";
      return this.visualizer.fillRect(0, 0, frame.frac8000 * this.size, frame.frac8000 * this.size);
    };

    VoiceSet.prototype.trigger = function(velocity) {
      return this.voices[this.focus].timeline.add(velocity);
    };

    return VoiceSet;

  })();

  Voice = (function() {
    Voice.prototype.C = 'Voice';

    Voice.prototype.toString = function() {
      return "[object " + this.C + "]";
    };

    function Voice(config) {
      if (config == null) {
        config = {};
      }
      this.timeline = new Timeline;
      this.hasFocus = false;
      this.size = 8;
      this.$canvas = document.createElement('canvas');
      this.$canvas.setAttribute('width', this.size + 'px');
      this.$canvas.setAttribute('height', this.size + 'px');
      this.$canvas.setAttribute('class', 'icon');
      config.$voiceSet.appendChild(this.$canvas);
      this.icon = this.$canvas.getContext('2d');
      this.visualizer = config.visualizer;
      this.color = this.icon.fillStyle = config.color;
      this.sample = config.sample;
    }

    Voice.prototype.activate = function() {
      this.size = 64;
      this.$canvas.setAttribute('width', this.size + 'px');
      this.$canvas.setAttribute('height', this.size + 'px');
      return this.icon.fillStyle = this.color;
    };

    Voice.prototype.deactivate = function() {
      this.size = 8;
      this.$canvas.setAttribute('width', this.size + 'px');
      this.$canvas.setAttribute('height', this.size + 'px');
      return this.icon.fillStyle = this.color;
    };

    Voice.prototype.render = function(frame, visualizerSize) {
      var scaleMultiplier;
      scaleMultiplier = this.hasFocus ? 1 : 0.5;
      this.icon.clearRect(0, 0, this.size, this.size);
      this.drawSquare(this.icon, frame.frac8000 * scaleMultiplier, this.size);
      this.visualizer.fillStyle = this.color;
      return this.timeline.render(frame, this.visualizer, visualizerSize);
    };

    Voice.prototype.drawSquare = function(context, scale, size) {
      var pos;
      scale = size * scale;
      pos = (size - scale) / 2;
      return context.fillRect(pos, pos, scale, scale);
    };

    return Voice;

  })();

  if (ªF === typeof define && define.amd) {
    define(function() {
      return Main;
    });
  } else if (ªO === typeof module && module && module.exports) {
    module.exports = Main;
  } else {
    this[ªI] = Main;
  }

}).call(this);
